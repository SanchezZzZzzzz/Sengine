#version 330 core
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec3 material_diffuse;
layout(location = 3) in float reflection;
layout(location = 4) in vec2 vertex_uv;
out vec2 UV;
vec3 light_position_1 = vec3(-30, 0, -50);
vec3 light_position_2 = vec3(30, 0, 50);
vec3 Position_worldspace;
out vec3 EyeDirection_cameraspace;
out vec3 light_direction_1;
out vec3 light_direction_2;
out vec3 Normal_cameraspace;
uniform mat4 MVP;
uniform mat4 M;
uniform mat4 V;
out vec3 material_diffuse_color;
out float reflection_coefficient;
void main(){
    material_diffuse_color = material_diffuse;
    reflection_coefficient = reflection;
    UV = vertex_uv;
    gl_Position = MVP * vec4(vertexPosition_modelspace, 1);
    Position_worldspace = (M * vec4(vertexPosition_modelspace, 1)).xyz;
    vec3 vertexPosition_cameraspace = ( V * M * vec4(vertexPosition_modelspace,1)).xyz;
    EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;
    vec3 light_position_transformed_1 = ( V * vec4(-light_position_1,1)).xyz;
    light_direction_1 = light_position_transformed_1 + EyeDirection_cameraspace;
    vec3 light_position_transformed_2 = (V * vec4(-light_position_2, 1)).xyz;
    light_direction_2 = light_position_transformed_2 + EyeDirection_cameraspace;
    Normal_cameraspace = ( V * M * vec4(vertexNormal_modelspace,0)).xyz;
}
